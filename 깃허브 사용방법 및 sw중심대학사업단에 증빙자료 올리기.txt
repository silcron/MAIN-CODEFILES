#설치할 프로그램 : Git, Visual Studio(Google검색), GithubDesktop(Google검색)
[SW중심대학사업단 오픈소스 활동 내역 2가지 하는방법.txt]

1. 깃허브 접속
2. 오른쪽 상단 위 나 클릭하고 Your repositories 클릭
   ㄴ Repository name * 란에 저장소 이름 아무거나 입력
   ㄴ Description : 설명 입력
   ㄴ Public/Private 중 Public 클릭
   ㄴ Initialize this repository with: 부분중 Add a README file 만 클릭
   ㄴ Create repository 클릭
3. 해당 repository 폴더내 만들어진 README 파일이 만들어졌을텐데 위에 연필을 클릭
4. Edit부분에서 소스를 적고 Commit changes 를 누르면 된다
   ㄴ Commit message 에 업데이트 된 내용 입력
   ㄴ Extended descrption 란에 추가된 설명 추가
   ㄴ Commit changes 누르면 최종적으로 완료

이제 SW중심대학사업단에 증빙자료를 올리면 된다


[오픈소스활동 - oss활동]
1) 깃허브 소스 올리기(상한 15점) 3 점 : 깃허브[insight]메뉴의 메인메뉴 캡쳐본(그래프 화면 등)
2) 깃허브 commit(상한 10점) 10점 : [insight]-[commits]캡쳐본
삼성노트 리스트에 내역 추가하기(깃허브 소스 / 깃허브 commit 올리기)

이 2가지를 순천대학교 SW중심대학사업단 -> 로그인 -> NOVA마일리지 -> 왼쪽탭에서 나의 NOVA 마일리지 클릭 -> 등록 버튼 클릭 -> 위에 1) 과 2)를 눌러 각 양식에 맞게 기재후 증빙파일을 각각 올려주면 된다

[GitHub에 Push(소스 올리는 행위) 해주는 Github를 연동해주는 프로그램의 Git의 일종인 GitDesktop 사용법]
1. 깃허브 접속
2. 깃허브 오른쪽 상단 위 나 클릭하고 Your repositories 클릭
3. 연동하고자 하는 repository 폴더에 들어가준다
4. 위에 보면 초록색 버튼의 Code 버튼을 눌러준다
5. Clone 이라는 부분에서 HTTPS 밑에 주소를 복사해준다
6. GitDesktop을 실행시켜준다
7. 메인화면에서 Current Repositories  를 클릭해준다
8. Add버튼을 클릭해준다
9. Clone repository를 클릭해준다
10. URL을 클릭해준다
11. URL부분에 아까 복사한 Repository 주소를 붙여넣기 해준다
12. Local Path 부분에는 깃허브 코드저장소와 연동해줄 나만의 파일을 관리할 폴더 위치를 저장해준다
13. Clone을 눌러준다
14. GitDesktop과 Github repository 가 서로 연동이 되었다
15. Open in Visual Studio 를 클릭한다 
16. 이제 아까 repository를 만드는 과정에서 만든 README.TXT파일을 내 컴퓨터에서 수정할 수 있게 되었다
17. VisualStudio 왼쪽화면을 보면 현재 내 github의 repository와 연동이 되어있기 때문에 깃허브내 repository에 존재하는 description 과 README.md라는 파일이 있을 것이다. 그 파일 내용은 아까 내가 직접 깃허브에서 수정한 내용이 메모장에 그대로 담겨있다.
18. 코드를 수정하고 저장을 하면 왼쪽 코드제어 부분에 저장이 되었다는 표시가 뜰것이다.
19. 아까 GithubDeskTop 을 통해 VisualStudio에 들어와서 github에 업로드되어있는 README.TXT파일을 수정하였으니 정상적으로 변경됬는지 확인하기 위해 다시 GitHubDesktop 프로그램으로 돌아가보자
20. 변경된 내용을 확인할 수 있을것이다.
21. 이제 변경을 했으니 왼쪽 밑에 Description 에 무엇을 업데이트 했는지 부연설명을 적어주자
22. 그리고 밑에 Commit to main 버튼을 눌러주자 : -> 소스가 변경되었음을 표시하는 단계일뿐
23. 이제 오른쪽에 Push Origin 이라는 버튼이 활성화 됐을것이다. 이 버튼을 누르자 : -> 변경된 소스내용을 GithubDesktop과 연동되어있는 Github의 Repository 내의 파일에 변경된 내용을 업데이트 시켜주는것이다. 즉 Push origin 까지 눌러줘야 내가 GitHubDesktop 의 Visualstudio를 통해 연동되어있는 Github 의 파일을 수정한 내용을 github소스에 정상적으로 반영시킬수있다.
24. 이제 깃허브에 들어가서 GitHubDesktop가 연동되어있는 repository에 들어가보자. 그러면 REAMD파일에 방금 Visual Studio를 통해 수정한 내용이 정상적으로 반영되어있을것이다. (변경된 파일에 Update 라고 적혀있다)

[다른쪽에서 소스를 수정했을때 가져오는 방법]
1. 깃허브 원하는 repository에 들어간다
2. 위에 + 버튼을 클릭한다
3. Create Newfile 을 누른다
   ㄴ repositry name / (파일이름을 적어준다)
   ㄴ Edit부분에 내용을 아무거나 적는다
   ㄴ Commit changes를 눌러준다.
   ㄴ Commit message에 메세지를 적어준다
   ㄴ Extenede description 에 부연설명을 적어준다
   ㄴ 밑은 그대로 두고 Commit changes를 눌러준다.
4. 그러면 해당 Repository에 새로운 파일이 만들어졌음을 확인할 숭 ㅣㅆ다
5. 다시 GuthubDesktop에 들어가준다
6. 위에 메뉴중에 Fetch orgin 이라는 버튼을 눌러준다 : 연동되어있는 해당 Github repository 에서 새롭게 생성도니 파일을 가져오는것임
7. 그러면 Pull 업데이트파일개수 commit from the origin remote 라는 화면이 새롭게 생길것이다
8. 옆에 Pull origin을 클릭해준다 : 해당 repository 에서 새롭게 만들어진 파일을 가져오는 것임
9. 이제 깃허브 repository와 연동되어 있는 내 로컬 폴더에도 새롭게 만들어진 파일을 정상적으로 불러오기했을것이다.
9. Visual Studio를 열어보면 왼쪽탭에 새롭게 만들어진 파일을 정상적으로 불러왓음을 알 수 있다.